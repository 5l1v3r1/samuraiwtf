---

- name: run the playbook tasks on the localhost from the ~/samuraiwtf folder
  hosts: 127.0.0.1
  connection: local
  tasks:

### Prerequisites

  - name: Check if nginx is already installed
    stat:
      path: /etc/nginx/nginx.conf
    register: stat_nginx_conf

  - name: Install nginx
    command: "amazon-linux-extras install nginx1.12"
    become: yes
    when: stat_nginx_conf.stat.exists == False

  - name: ensure prerequisite packages are installed
    yum:
      name:
        - vim
        - curl
        - docker
        - unzip
        - python-pip
        - php-fpm
        - nano
    become: true

  - name: python prerequisite modules
    pip:
      name: "{{ modules }}"
    become: yes
    vars:
      modules:
      - docker

  - name: Check if docker-compose is already installed
    stat:
      path: /usr/bin/docker-compose
    register: stat_docker_compose

  - name: install docker-compose
    shell: 'curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/bin/docker-compose'
    become: yes
    when: stat_docker_compose.stat.exists == False 

  - name: set permissions for docker-compose
    file:
      path: /usr/bin/docker-compose
      mode: "+x"
    become: yes

  - name: Check if npm installer already downloaded
    stat:
      path: /tmp/npm_setup.sh
    register: stat_npm_setup

  - name: Download npm installer
    get_url:
      url: https://rpm.nodesource.com/setup_8.x
      dest: /tmp/npm_setup.sh
      mode: 0744
    when: stat_npm_setup.stat.exists == False

  - name: Install npm repo
    shell: '/tmp/npm_setup.sh'
    become: yes
    when: stat_npm_setup.stat.exists == False

  - name: Install nodejs
    yum:
      name: nodejs
      enablerepo: nodesource
    become: yes

  - name: Download and install Chrome
    yum:
      name: https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
      state: present
    become: yes

## TODO: Figure out how to install Google Chrome

  - name: create the main Samurai program folder
    file:
      path: /opt/samurai
      state: directory
      owner: "{{ lookup('env','USER') }}"
      group: "CORP\\domain users"
    become: yes

### Install Tools

  - name: create burpsuite folder
    file:
      path: /opt/samurai/burpsuite
      state: directory

  - name: download burpsuite community
    get_url:
      url: https://portswigger.net/burp/releases/download?product=community&type=jar
      dest: /opt/samurai/burpsuite/burp.jar

  - name: create zap folder
    file:
      path: /opt/samurai/zap
      state: directory

  - name: Download and unzip ZAP
    unarchive:
      src: https://github.com/zaproxy/zaproxy/releases/download/2.6.0/ZAP_2.6.0_Crossplatform.zip
      dest: /opt/samurai/zap
      remote_src: yes

  - name: create Postman folder
    file:
      path: /opt/samurai/postman
      state: directory

  - name: Download and install and Postman
    unarchive:
      src: https://dl.pstmn.io/download/latest/linux64
      dest: /opt/samurai/
      remote_src: yes

  - name: fetch nikto from github
    git:
      repo: https://github.com/sullo/nikto.git
      dest: /opt/samurai/nikto
      depth: 1

  - name: fetch sqlmap from github
    git:
      repo: https://github.com/sqlmapproject/sqlmap.git
      dest: /opt/samurai/sqlmap
      depth: 1

  - name: fetch fuzzdb from github
    git:
      repo: https://github.com/fuzzdb-project/fuzzdb.git
      dest: /opt/samurai/fuzzdb
      depth: 1

  - name: fetch sqlmap from github
    git:
      repo: https://github.com/danielmiessler/SecLists.git
      dest: /opt/samurai/SecLists
      depth: 1

  - name: Copy launcher scripts
    copy:
      src: ../../config/launcher/
      dest: /usr/bin/
      group: "CORP\\domain users"
      mode: 0755
    become: yes

### Plugin and Extension Downloads
  - name: create burp plugins folder
    file:
      path: /opt/samurai/burp_plugins
      state: directory
      owner: "{{ lookup('env','USER') }}"
      group: "CORP\\domain users"
    become: yes

  - name: Download burp plugin - co2
    get_url:
      url: https://portswigger.net/bappstore/bapps/download/c5071c7a7e004f72ae485e8a72911afc
      dest: /opt/samurai/burp_plugins/co2.bapp

  - name: Download burp plugin - paramalyzer
    get_url:
      url: https://portswigger.net/bappstore/bapps/download/0ac13c45adff4e31a3ca8dc76dd6286c
      dest: /opt/samurai/burp_plugins/paramalyzer.bapp

  - name: Download burp plugin - wsdler
    get_url:
      url: https://portswigger.net/bappstore/bapps/download/594a49bb233748f2bc80a9eb18a2e08f
      dest: /opt/samurai/burp_plugins/wsdler.bapp

  - name: create firefox extensions folder
    file:
      path: /opt/samurai/firefox_extensions
      state: directory
      owner: "{{ lookup('env','USER') }}"
      group: "CORP\\domain users"
    become: yes

  - name: Download foxyproxy extension
    get_url:
      url: https://addons.mozilla.org/firefox/downloads/latest/foxyproxy-standard/addon-2464-latest.xpi
      dest: /opt/samurai/firefox_extensions/foxyproxy.xpi

  - name: create google chrome extensions folder
    file:
      path: /opt/google/chrome/extensions
      state: directory
      owner: "{{ lookup('env','USER') }}"
      group: "CORP\\domain users"
    become: yes

  - name: Copy extensions
    copy:
      src: "{{ item }}"
      dest: /opt/google/chrome/extensions
      mode: 0644
    become: yes
    with_fileglob:
      - "../../config/crx/*.json"

### Setup first-time login customizations
  - name: Copy desktop file somewhere we can use it
    copy:
      src: ../../config/samurai-background.png
      dest: /opt/samurai/samurai-background.png

  - name: Create first-time login setup script.
    copy:
      dest: /etc/profile.d/first_login.sh
      content: |
        #!/bin/bash
        
        if [ -e $HOME/.samurai ]
        then
          echo "already run first time scripts."
        else
          cd /etc/dconf
          /usr/bin/dconf write /org/mate/desktop/background/picture-filename "'/opt/samurai/samurai-background.png'"
          /usr/bin/dconf write /org/mate/desktop/background/picture-options "'stretched'"
          if [ ! -L ~/samurai ]; then
            ln -s /opt/samurai ~/samurai
          fi
          touch $HOME/.samurai
        fi
      mode: 0755
    become: yes

  - name: Copy bookmarks to somewhere we can use it
    copy:
      src: ../../config/home/bookmarks.html
      dest: /opt/samurai

  - name: Fix default Firefox bookmarks
    lineinfile:
      dest: /usr/lib64/firefox/distribution/distribution.ini
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: '^item.1.title=Amazon Workspaces', line: 'item.1.title=Dojo Basic' }
      - { regexp: '^item.1.link=https://aws.amazon.com/workspaces/', line: 'item.1.link=http://dojo-basic.wtf' }
      - { regexp: '^item.2.title=Getting Started', line: 'item.2.title=DVWA' }
      - { regexp: '^item.2.link=https://docs.aws.amazon.com', line: 'item.2.link=http://dvwa.wtf' }
      - { regexp: '^item.3.title=Amazon Linux', line: 'item.3.title=Mutillidae' }
      - { regexp: '^item.3.link=https://docs.aws.amazon.com', line: 'item.3.link=http://mutillidae.wtf' }
      - { regexp: '^item.4.title=Streaming', line: 'item.4.title=CORS Lab' }
      - { regexp: '^item.4.link=https://aws.amazon.com', line: 'item.4.link=http://www.cors.dem' }
      - { regexp: '^item.5.title=Forums', line: 'item.5.title=Dojo Scavenger' }
      - { regexp: '^item.5.link=https://forums.aws.amazon.com', line: 'item.5.link=http://dojo-scavenger.wtf' }
      - { regexp: '^item.6.title=Amazon WorkDocs', line: 'item.6.title=Juice Shop CTF' }
      - { regexp: '^item.6.link=https://aws.amazon.com/workdocs/', line: 'item.6.link=http://juice-shop.wtf' }
    become: yes

  - name: Remove extra bookmarks
    lineinfile:
      dest: /usr/lib64/firefox/distribution/distribution.ini
      regexp: "^item.[78]..*"
      state: absent
    become: yes

### Install Targets
  - name: create the targets directory
    file:
      path: /opt/targets
      state: directory
    become: yes

  - import_tasks: ../../targets/samurai-dojo/samurai-dojo.yml

  - import_tasks: ../../targets/juice-shop/juice-shop.yml

  - import_tasks: ../../targets/dvwa/dvwa.yml

  - import_tasks: ../../targets/mutillidae/mutillidae.yml

  - import_tasks: ../../targets/musashi/musashi-js.yml


### Update PHP Config
  - name: Update PHP listener
    replace:
      path: /etc/php-fpm.d/www.conf
      regexp: '^listen = 127.0.0.1.*'
      replace: 'listen = /var/run/php-fpm/php-fpm.sock'
    become: yes

  - name: Update PHP User
    replace:
      path: /etc/php-fpm.d/www.conf
      regexp: '^user = apache'
      replace: 'user = nginx'
    become: yes

  - name: Update PHP Group
    replace:
      path: /etc/php-fpm.d/www.conf
      regexp: '^group = apache'
      replace: 'group = nginx'
    become: yes

  - name: Add info.php test file
    copy:
      dest: /usr/share/nginx/html/info.php
      content: |
        <?php phpinfo(); ?>
      mode: 0644
      force: no

  - name: Install nginx configuration
    copy:
      src: ../../config/nginx/
      dest: /etc/nginx/conf.d/
      force: no
    become: yes

  - name: Start PHP Processor
    service:
      name: php-fpm
      state: started
      enabled: yes
    become: yes


  - name: Create service descriptor
    copy:
      dest: /etc/systemd/system/wtftargets.service
      content: |
        [Unit]
        Description=WTF Targets service
        After=systemd-user-sessions.service
        [Service]
        Type=forking
        ExecStart=/usr/local/bin/startup_targets.sh
      mode: 0744
    become: yes

  - name: Start nginx
    service:
      name: nginx
      state: started
      enabled: yes
    become: yes
   
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

- import_playbook: menus.yml
